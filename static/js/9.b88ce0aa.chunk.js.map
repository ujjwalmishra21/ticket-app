{"version":3,"sources":["components/UI/Loader/Loader.js","components/UI/Input/Input.js","components/UI/ImageComponent/ImageComponent.js","../node_modules/semantic-ui-react/dist/es/elements/Loader/Loader.js","containers/Signup/Signup.js"],"names":["LoaderUI","active","size","input","props","inputElement","validError","invalid","shouldValidate","touched","elementType","Input","elementConfig","value","onChange","changed","inputMode","options","style","marginBottom","ImageComponent","circular","bordered","class","Loader","children","className","content","disabled","indeterminate","inline","inverted","classes","cx","useKeyOnly","useKeyOrValueAndKey","rest","getUnhandledProps","ElementType","getElementType","React","createElement","_extends","childrenUtils","isNil","handledProps","propTypes","Signup","state","signUpForm","type","text","validation","valid","name","placeholder","required","mobile_number","isNumeric","minLength","maxLength","completed","submitHandler","event","preventDefault","data","field","onSignUp","error","setState","changeHandler","inputIdentifier","updatedFormElement","updatedObject","target","checkValidity","updatedForm","formIsValid","formElementAr","key","this","push","id","config","form","map","formEle","onClick","color","loading","alert","to","src","padding","margin","backgroundColor","Component","connect","auth","dispatch","actions"],"mappings":"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","file":"static/js/9.b88ce0aa.chunk.js","sourcesContent":["import React from 'react';\nimport { Dimmer, Loader, Segment} from 'semantic-ui-react';\n\nconst LoaderUI = () => (\n    <Segment>\n        <Dimmer active>\n            <Loader size='medium'/>\n        </Dimmer>\n    </Segment>\n);\n\nexport default LoaderUI;","import React from 'react';\nimport { Form, Select } from 'semantic-ui-react'\nconst input = (props) => {\n    \n    let inputElement = null;\n    let validError = null;\n    if(props.invalid && props.shouldValidate && props.touched){\n        validError = <p>Please enter a valid value</p>\n    }\n\n    switch(props.elementType){\n        case 'input':\n            inputElement = <Form.Input \n                                {...props.elementConfig}\n                                value={props.value}\n                                onChange={props.changed}\n                                inputMode={props.inputMode}    \n                            />;\n        break;\n        case 'select':\n            inputElement = <Select\n                                value={props.value}\n                                onChange={props.changed}\n                                options={props.elementConfig.options}\n                            />;\n        break;\n        default:\n            inputElement = null;\n        break;\n\n    }\n\n    return (\n        <div style={{marginBottom:'10px'}}>\n            {inputElement}\n            {validError}\n        </div>\n    )\n}\n\nexport default input;\n\n","import React from 'react';\nimport { Image } from 'semantic-ui-react';\nimport './ImageComponent.css';\nconst ImageComponent = props => {\n    return (\n        <Image  circular={props.circular} bordered={props.bordered} size={props.size} style={props.class}/>\n    );\n}\n\nexport default ImageComponent;","import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useKeyOrValueAndKey } from '../../lib';\n/**\n * A loader alerts a user to wait for an activity to complete.\n * @see Dimmer\n */\n\nfunction Loader(props) {\n  var active = props.active,\n      children = props.children,\n      className = props.className,\n      content = props.content,\n      disabled = props.disabled,\n      indeterminate = props.indeterminate,\n      inline = props.inline,\n      inverted = props.inverted,\n      size = props.size;\n  var classes = cx('ui', size, useKeyOnly(active, 'active'), useKeyOnly(disabled, 'disabled'), useKeyOnly(indeterminate, 'indeterminate'), useKeyOnly(inverted, 'inverted'), useKeyOnly(children || content, 'text'), useKeyOrValueAndKey(inline, 'inline'), 'loader', className);\n  var rest = getUnhandledProps(Loader, props);\n  var ElementType = getElementType(Loader, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nLoader.handledProps = [\"active\", \"as\", \"children\", \"className\", \"content\", \"disabled\", \"indeterminate\", \"inline\", \"inverted\", \"size\"];\nLoader.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** A loader can be active or visible. */\n  active: PropTypes.bool,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** A loader can be disabled or hidden. */\n  disabled: PropTypes.bool,\n\n  /** A loader can show it's unsure of how long a task will take. */\n  indeterminate: PropTypes.bool,\n\n  /** Loaders can appear inline with content. */\n  inline: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['centered'])]),\n\n  /** Loaders can have their colors inverted. */\n  inverted: PropTypes.bool,\n\n  /** Loaders can have different sizes. */\n  size: PropTypes.oneOf(SUI.SIZES)\n} : {};\nexport default Loader;","import React, { Component } from 'react';\nimport {connect} from 'react-redux';\nimport {Redirect} from 'react-router-dom';\nimport { Form, Button } from 'semantic-ui-react';\n\nimport Aux from '../../hoc/Aux/Aux';\nimport Input  from '../../components/UI/Input/Input';\nimport Image from '../../components/UI/ImageComponent/ImageComponent';\nimport Loader from '../../components/UI/Loader/Loader';\n\nimport { updatedObject, checkValidity } from '../../utility/utility';\nimport * as actions from '../../store/actions/index';\n\nclass Signup extends Component {\n    state={\n        signUpForm:{\n            type:{\n                elementType: 'select',\n                elementConfig: {\n                    options: [\n                        {value: 1, text: 'Customer'},\n                        {value: 2, text: 'Owner'}\n                    ]\n                },\n                inputMode: 'none',\n                value: 1,\n                validation: {},\n                valid: true\n            },\n            name:{\n                elementType: 'input',\n                elementConfig:{\n                    type: 'text',\n                    placeholder: 'Your name'\n                },\n                value:'',\n                validation:{\n                    required: true\n                },\n                inputMode:'text',\n                valid: false,\n                touched: false\n            },\n            mobile_number:{\n                elementType: 'input',\n                elementConfig:{\n                    type: 'text',\n                    placeholder: 'Enter mobile number'\n                },\n                value:'',\n                validation:{\n                    required: true,\n                    isNumeric: true,\n                    minLength: 10,\n                    maxLength: 10\n                },\n                inputMode:'numeric',\n                valid: false,\n                touched: false\n            }\n        },\n        completed: false\n    }\n    submitHandler = (event) => {\n        event.preventDefault();\n        let data = {};\n        for(let field in this.state.signUpForm){\n            data[field] = this.state.signUpForm[field].value;\n        }\n        this.props.onSignUp(data);\n        if(!this.props.error)\n            this.setState({ completed: true });\n        \n\n    }\n    changeHandler = (event, inputIdentifier) => {\n\n        const updatedFormElement = updatedObject( this.state.signUpForm[inputIdentifier],{\n            value: event.target.value,\n            valid: checkValidity(event.target.value,  this.state.signUpForm[inputIdentifier].validation),\n            touched: true\n        });\n\n        const updatedForm = updatedObject(this.state.signUpForm, {\n            [inputIdentifier]: updatedFormElement\n        });\n\n        let formIsValid = true;\n        for(let inputIdentifier in updatedForm){\n            formIsValid = updatedForm[inputIdentifier].valid && formIsValid;\n        }\n        this.setState({\n            signUpForm: updatedForm,\n            formIsValid: formIsValid\n        });\n    }\n\n    render(){\n        let formElementAr = [];\n        for(let key in this.state.signUpForm){\n            formElementAr.push({\n                id: key,\n                config: this.state.signUpForm[key] \n            });\n        }\n        \n        let form = (\n            <Form>\n                { formElementAr.map(formEle => {\n                    return (\n                        <Input\n                            key={formEle.id}\n                            elementType={formEle.config.elementType}\n                            elementConfig={formEle.config.elementConfig}\n                            value={formEle.config.value}\n                            invalid={!formEle.config.valid}\n                            shouldValidate={formEle.config.validation}\n                            touched={formEle.config.touched}\n                            inputMode={formEle.config.inputMode}\n                            changed={(event) => this.changeHandler(event, formEle.id)}\n                                 \n                        />\n                        \n                    );\n                })}\n                <Button onClick={this.submitHandler} content='Submit' />\n            </Form>\n        );\n\n        let imageClass = {\n            padding: '20px',\n            margin: '30px',\n            backgroundColor: 'white'\n        };\n        let error = null;\n        if(this.props.error){\n            error = <p style={{color:'red'}}>{this.props.error}</p>\n        }\n        if(this.props.loading){\n            form = <Loader />\n        }\n        if(this.state.completed){\n            alert('User successfully registered. Please Login to continue');\n            form = <Redirect to=\"/login\" />\n        }\n\n        return(\n           <Aux>\n                <Image src='https://img.icons8.com/officel/80/000000/booking.png' size='small' circular={true} bordered={true} class={imageClass} />\n                {form}\n                {error}\n           </Aux>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        loading: state.auth.loading,\n        error: state.auth.error\n    }\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onSignUp: (data) => dispatch(actions.signUp(data))\n    };\n};\n\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Signup);"],"sourceRoot":""}