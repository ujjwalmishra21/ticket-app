{"version":3,"sources":["components/UI/Input/Input.js","containers/OTP/OTP.js"],"names":["input","props","inputElement","validError","invalid","shouldValidate","touched","elementType","Input","elementConfig","value","onChange","changed","inputMode","options","style","marginBottom","OTP","state","otpForm","otp","type","validation","required","isNumeric","minLength","maxLength","valid","formIsValid","redirectToLogin","onSubmit","event","preventDefault","onAuth","mobile_number","onResendOTP","onAuthInit","setState","changeHandler","inputIdentifier","updatedFormElement","updatedObject","target","checkValidity","updatedForm","formElementAr","key","this","push","id","config","form","map","formEle","disabled","loading","onClick","className","marginLeft","redirect","isAuthenticated","to","Component","connect","auth","error","token","authRedirectPath","dispatch","actions","onSetAuthRedirectPath"],"mappings":"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","file":"static/js/14.f2027034.chunk.js","sourcesContent":["import React from 'react';\nimport { Form, Select } from 'semantic-ui-react'\nconst input = (props) => {\n    \n    let inputElement = null;\n    let validError = null;\n    if(props.invalid && props.shouldValidate && props.touched){\n        validError = <p>Please enter a valid value</p>\n    }\n\n    switch(props.elementType){\n        case 'input':\n            inputElement = <Form.Input \n                                {...props.elementConfig}\n                                value={props.value}\n                                onChange={props.changed}\n                                inputMode={props.inputMode}    \n                            />;\n        break;\n        case 'select':\n            inputElement = <Select\n                                value={props.value}\n                                onChange={props.changed}\n                                options={props.elementConfig.options}\n                            />;\n        break;\n        default:\n            inputElement = null;\n        break;\n\n    }\n\n    return (\n        <div style={{marginBottom:'10px'}}>\n            {inputElement}\n            {validError}\n        </div>\n    )\n}\n\nexport default input;\n\n","import React, { Component } from 'react';\nimport {connect} from 'react-redux';\nimport { Form, Button } from 'semantic-ui-react';\n\nimport * as actions from '../../store/actions/index';\nimport Aux from '../../hoc/Aux/Aux';\nimport Input from '../../components/UI/Input/Input';\nimport { checkValidity, updatedObject } from '../../utility/utility';\nimport { Redirect } from 'react-router-dom';\n\nclass OTP extends Component {\n    state = {\n        otpForm:{\n            otp:{\n            elementType: 'input',\n            elementConfig: {\n                type: 'text'\n            },\n            value:'',\n            validation:{\n                required: true,\n                isNumeric: true,\n                minLength: 4,\n                maxLength: 4\n            },\n            inputMode:'numeric',\n            valid: true,\n            touched: true\n            }\n        },\n        formIsValid: false,\n        redirectToLogin: false\n    };\n\n    onSubmit = (event) => {\n        event.preventDefault();\n        this.props.onAuth(this.props.mobile_number, this.state.otpForm.otp.value)\n    }\n\n    onResendOTP = (event) => {\n        event.preventDefault();\n        if(this.props.mobile_number){\n            this.props.onAuthInit(this.props.mobile_number);\n        }\n        else{\n            this.setState({\n                redirectToLogin: true\n            });\n        }    \n    }\n\n    componentDidMount(){\n        // if(!this.props.b && this.props.authRedirectPath !== '/'){\n        //     this.props.onSetAuthRedirectPath();\n        // }\n    }\n\n    changeHandler = (event, inputIdentifier) => {\n        \n        const updatedFormElement = updatedObject( this.state.otpForm[inputIdentifier], {\n            value: event.target.value,\n            valid: checkValidity(event.target.value, this.state.otpForm[inputIdentifier].validation),\n            touched:true\n        });\n\n        const updatedForm = updatedObject(this.state.otpForm, {\n            [inputIdentifier]: updatedFormElement\n        });\n\n        let formIsValid = true;\n\n        for(let inputIdentifier in updatedForm){\n            formIsValid = updatedForm[inputIdentifier].valid && formIsValid;\n        }\n\n        this.setState({\n            otpForm: updatedForm,\n            formIsValid: formIsValid\n        });\n        \n    }\n\n    render(){\n\n        let formElementAr = [];\n\n        for(let key in this.state.otpForm){\n            formElementAr.push({\n                id: key,\n                config:this.state.otpForm[key]\n            });\n        }\n        \n        let form = (\n            <Form>\n                { formElementAr.map((formEle) => {\n                        return (\n                            <Input \n                                key={formEle.id}\n                                elementType={formEle.config.elementType}\n                                elementConfig={formEle.config.elementConfig}\n                                value={formEle.config.value}\n                                invalid={!formEle.config.valid}\n                                shouldValidate={formEle.config.validation}\n                                touched={formEle.config.touched}\n                                inputMode={formEle.config.inputMode}\n                                changed={(event) => this.changeHandler(event, formEle.id)}\n                            />\n                        );\n                    })                 \n                }\n                <Button \n                    disabled={this.props.loading} \n                    loading={this.props.loading} \n                    onClick={this.onSubmit} \n                    className=\"ui button\">Submit</Button>\n                <Button \n                    style={{marginLeft: '10px'}} \n                    disabled={this.props.loading} \n                    loading={this.props.loading} \n                    onClick={this.onResendOTP} \n                    className=\"ui button\">Resend OTP</Button>\n            </Form>\n        );\n        \n        let redirect = null;\n        if(this.props.isAuthenticated){\n            redirect = <Redirect to=\"/\" />\n        }else if(this.state.redirectToLogin){\n            redirect = <Redirect to=\"/login\"/>\n        }\n        return (\n            <Aux>\n                {redirect}\n                {form}\n            </Aux>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        loading: state.auth.loading,\n        error: state.auth.error,\n        mobile_number: state.auth.mobile_number,\n        isAuthenticated: state.auth.token !== null,\n        authRedirectPath: state.auth.authRedirectPath\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onAuth: (mobile_number, otp) => dispatch(actions.auth(mobile_number, otp)),\n        onAuthInit: (mobile_number) => dispatch(actions.authInit(mobile_number)),\n        onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(OTP);"],"sourceRoot":""}