{"version":3,"sources":["components/UI/Loader/Loader.js","components/UI/Input/Input.js","containers/AddStore/AddStore.js"],"names":["LoaderUI","active","size","input","props","inputElement","validError","invalid","shouldValidate","touched","elementType","Input","elementConfig","value","onChange","changed","inputMode","options","style","marginBottom","AddStore","state","addStoreForm","store_name","type","placeholder","validation","required","valid","street","locality","landmark","city","country","zip","isNumeric","minLength","maxLength","open_time","close_time","formIsValid","submit","handleChange","setState","onSubmit","event","preventDefault","data","field","userData","user_id","onAddStore","token","changeHandler","inputIdentifier","updatedFormElement","updatedObject","target","checkValidity","updatedForm","this","onfetchSlots","formElementAr","key","push","id","config","time_options","slots","forEach","slot","start_time","label","form","map","formEle","className","onClick","error","color","loading","response","status","alert","Component","connect","auth","store","dispatch","actions"],"mappings":"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","file":"static/js/11.493db2c0.chunk.js","sourcesContent":["import React from 'react';\nimport { Dimmer, Loader, Segment} from 'semantic-ui-react';\n\nconst LoaderUI = () => (\n    <Segment>\n        <Dimmer active>\n            <Loader size='medium'/>\n        </Dimmer>\n    </Segment>\n);\n\nexport default LoaderUI;","import React from 'react';\nimport { Form, Select } from 'semantic-ui-react'\nconst input = (props) => {\n    \n    let inputElement = null;\n    let validError = null;\n    if(props.invalid && props.shouldValidate && props.touched){\n        validError = <p>Please enter a valid value</p>\n    }\n\n    switch(props.elementType){\n        case 'input':\n            inputElement = <Form.Input \n                                {...props.elementConfig}\n                                value={props.value}\n                                onChange={props.changed}\n                                inputMode={props.inputMode}    \n                            />;\n        break;\n        case 'select':\n            inputElement = <Select\n                                value={props.value}\n                                onChange={props.changed}\n                                options={props.elementConfig.options}\n                            />;\n        break;\n        default:\n            inputElement = null;\n        break;\n\n    }\n\n    return (\n        <div style={{marginBottom:'10px'}}>\n            {inputElement}\n            {validError}\n        </div>\n    )\n}\n\nexport default input;\n\n","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport { Form, Button} from 'semantic-ui-react';\nimport Select from 'react-select';\nimport {Redirect} from 'react-router-dom';\nimport Input from '../../components/UI/Input/Input';\nimport Loader from '../../components/UI/Loader/Loader';\nimport './AddStore.css'\nimport Aux from '../../hoc/Aux/Aux';\nimport * as actions from '../../store/actions/index';\nimport { checkValidity, updatedObject } from '../../utility/utility';\n\nclass AddStore extends Component{\n    state={\n        addStoreForm:{\n            store_name:{\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Enter your store name'\n                },\n                value:'',\n                validation:{\n                    required: true\n                },\n                inputMode:'text',\n                valid: false,\n                touched: false\n            },\n            street:{\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Enter your street'\n                },\n                value: '',\n                validation:{\n                    required: true\n                },\n                inputMode:'text',\n                valid: false,\n                touched: false\n            },\n            locality:{\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Enter your locality'\n                },\n                value: '',\n                validation: {\n                    required: 'text',\n                },\n                valid: false,\n                touched: false\n            },\n            landmark:{\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Enter your landmark'\n                },\n                value: '',\n                validation: {},\n                inputMode:'text',\n                valid: false,\n                touched: false\n            },\n            city:{\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Enter your city'\n                },\n                value: '',\n                validation: {\n                    required: 'text',\n                },\n                inputMode:'text',\n                valid: false,\n                touched: false\n            },\n            state:{\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Enter your state'\n                },\n                value: '',\n                validation: {\n                    required: 'text',\n                },\n                inputMode:'text',\n                valid: false,\n                touched: false\n                \n            },\n            country:{\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Enter your country'\n                },\n                value: '',\n                validation: {\n                    required: 'text',\n                },\n                inputMode:'text',\n                valid: false,\n                touched: false\n\n            },\n            zip:{\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Enter your zip code'\n                },\n                value: '',\n                validation: {\n                    required: 'text',\n                    isNumeric: true,\n                    minLength: 6,\n                    maxLength: 6\n                },\n                inputMode:'numeric',\n                valid: false,\n                touched: false\n\n            }\n        },\n        open_time: null,\n        close_time: null,\n        formIsValid: false,\n        submit: false\n    };\n    componentDidMount(){\n     \n        this.props.onfetchSlots(this.props.token);\n    }\n    handleChange = (type, value) =>{\n        \n        this.setState({ \n            [type]: value\n        });\n        \n    };\n    onSubmit = (event) => {\n        event.preventDefault();\n        let data = {};\n\n        for(let field in this.state.addStoreForm){\n            data[field] = this.state.addStoreForm[field].value;\n        }\n        data['is_active'] = 0;\n        data['owner_id'] = this.props.userData.user_id;\n        data['open_time'] = this.state.open_time.value;\n        data['close_time'] = this.state.close_time.value;\n       \n        this.props.onAddStore(this.props.token, data);\n       \n    };\n    changeHandler = (event, inputIdentifier) => {\n        \n        const updatedFormElement= updatedObject(this.state.addStoreForm[inputIdentifier], {\n            value: event.target.value,\n            valid: checkValidity(event.target.value, this.state.addStoreForm[inputIdentifier].validation),\n            touched: true\n        });\n\n        const updatedForm = updatedObject(this.state.addStoreForm,{\n            [inputIdentifier]: updatedFormElement\n        });\n\n        let formIsValid = true;\n        for(let inputIdentifier in updatedForm){\n            formIsValid = updatedForm[inputIdentifier].valid && formIsValid;\n        }\n\n        this.setState({\n            addStoreForm: updatedForm,\n            formIsValid: formIsValid\n        })\n\n    };\n\n    render(){\n\n        let formElementAr = [];\n\n        for(let key in this.state.addStoreForm){\n            formElementAr.push({\n                id: key,\n                config: this.state.addStoreForm[key]\n            });\n        }\n        \n        let time_options = [];\n                \n        this.props.slots.forEach(slot => {\n            time_options.push({\n                value: slot.start_time,\n                label: slot.start_time\n            });\n        });\n\n        var form = (\n            <Form>\n                {\n                    formElementAr.map((formEle) => {\n                        return (\n                            <Input\n                                key={formEle.id}\n                                elementType={formEle.config.elementType}\n                                elementConfig={formEle.config.elementConfig}\n                                value={formEle.config.value}\n                                invalid={!formEle.config.valid}\n                                shouldValidate={formEle.config.validation}\n                                touched={formEle.config.touched}\n                                inputMode={formEle.config.inputMode}\n                                changed={(event)=> this.changeHandler(event, formEle.id)}\n                            />\n                        );\n\n                    })\n                }\n                <Select \n                    className='select'\n                    value={this.state.open_time}\n                    onChange={(value) => this.handleChange('open_time', value)}\n                    placeholder='Opening Time'\n                    options={time_options}\n                    />\n                <Select\n                    className='select'\n                    value={this.state.close_time}\n                    onChange={(value) => this.handleChange('close_time',  value)}\n                    placeholder='Closing Time'\n                    options={time_options}\n                    /> \n\n                <Button onClick={this.onSubmit}>Add Store</Button>\n            </Form>\n        );\n        var error = <p style={{color:'red'}}>{this.props.error}</p>\n        if(this.props.loading){\n            form = <Loader />\n        }\n        if(this.props.response &&this.props.response.status === 'success'){\n            let message = 'Your request submitted successfully. We will let you know once your request is confirmed.'; \n            alert(message);\n        }        \n        return (\n            <Aux>\n                <h1>Add store</h1>\n                {form}\n                {error}\n            </Aux>\n        );\n    }\n}\nconst mapStateToProps = state => {\n    return {\n        token: state.auth.token,\n        userData: state.auth.data,\n        response: state.store.response,\n        error: state.store.error,\n        loading: state.store.loading,\n        slots: state.slot.slots\n    };\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onAddStore: (token,data) => dispatch(actions.addStore(token,data)),\n        onfetchSlots: (token) => dispatch(actions.fetchSlots(token))\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddStore);"],"sourceRoot":""}