{"version":3,"sources":["components/UI/Loader/Loader.js","components/UI/CardGroupOwner/CardElementNew/CardElementNew.js","components/UI/CardGroupOwner/CardGroupOwner.js","components/UI/CardGroupCustomer/CardElementCustomer/CardElementCustomer.js","components/UI/CardGroupCustomer/CardGroupCustomer.js","containers/MyBookings/MyBookings.js"],"names":["LoaderUI","active","size","CardElementNew","props","date","open_time_s","open_time","split","close_time_s","close_time","booking_date","cur_date_time","Date","getDay","getMonth","getFullYear","Card","Content","Header","store_name","Meta","slot_details","description","Description","CardContent","extra","locality","street","city","connect","state","loading","booking","error","bookings","length","forEach","details","push","booking_details","store_details","country","landmark","zip","owner_id","slot","bookings_html","Group","style","justifyContent","width","map","key","booking_id","customer_id","Loader","alert","Aux","slot_description","store_address","store","CardElementCustomer","MyBookings","this","getBookings","token","html_alt","heading","parseInt","data","user_id","html","Component","auth","dispatch","actions"],"mappings":"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","file":"static/js/15.c2611764.chunk.js","sourcesContent":["import React from 'react';\nimport { Dimmer, Loader, Segment} from 'semantic-ui-react';\n\nconst LoaderUI = () => (\n    <Segment>\n        <Dimmer active>\n            <Loader size='medium'/>\n        </Dimmer>\n    </Segment>\n);\n\nexport default LoaderUI;","import React from 'react';\nimport {Card, CardContent} from 'semantic-ui-react';\n\nconst CardElementNew = props => {\n    let date = '';\n    let open_time_s = props.open_time.split(':');\n    let open_time = open_time_s[0] + ':' + open_time_s[1];\n\n    let close_time_s = props.close_time.split(':');\n    let close_time = close_time_s[0] + ':' + close_time_s[1];\n    if(props.booking_date){\n        let cur_date_time = new Date(props.booking_date);\n        let day = cur_date_time.getDay() < 10 ? '0' + cur_date_time.getDay() : cur_date_time.getDay();\n        let month =  (cur_date_time.getMonth()+1) < 10 ? '0' + (cur_date_time.getMonth()+1) : (cur_date_time.getMonth()+1);\n\n        date = day + '/' + month + '/' + cur_date_time.getFullYear();\n    }\n \n    return (\n        <Card>\n            <Card.Content>\n                <Card.Header>{props.store_name}</Card.Header>\n                <Card.Meta>\n                    Slot Date: {date}\n                </Card.Meta>\n                <Card.Meta>\n                    Slot Time: {props.slot_details.description}\n                </Card.Meta>\n                <Card.Description>\n                    Store Hours: {open_time} - {close_time}\n                </Card.Description>\n            </Card.Content>\n            <CardContent extra>\n                <Card.Description>\n                    {props.locality}, {props.street}, {props.city}\n                </Card.Description>\n            </CardContent>\n        </Card>\n    );\n};\n\nexport default CardElementNew;","import React from 'react';\nimport CardElementNew from './CardElementNew/CardElementNew';\nimport Aux from '../../../hoc/Aux/Aux';\nimport {connect} from 'react-redux';\nimport {Card} from 'semantic-ui-react';\nimport Loader from '../Loader/Loader';\n\nconst CardGroupOwner = (props) => {\n    let bookings = [];\n    \n    if(props.bookings && props.bookings.length > 0){\n        props.bookings.forEach(booking => {\n            booking.bookings.forEach(details => {\n                bookings.push({\n                    booking_details: details,\n                    store_details: {\n                        city: booking.city,\n                        open_time: booking.open_time,\n                        close_time: booking.close_time,\n                        country: booking.country,\n                        landmark: booking.landmark,\n                        locality: booking.locality,\n                        state: booking.state,\n                        store_name: booking.store_name,\n                        street: booking.street,\n                        zip: booking.zip,\n                        owner_id: booking.owner_id,\n                    },\n                    slot_details: details.slot\n                });\n            });\n        });\n      \n        \n    }\n  \n    var bookings_html = (\n        <Card.Group style={{justifyContent: 'center',width: '100%'}}>\n            {\n                bookings.length > 0 && bookings.map(booking => {\n                    return(\n                        <CardElementNew\n                            key={booking.booking_details.booking_id}\n                            store_name={booking.store_details.store_name}\n                            open_time={booking.store_details.open_time}\n                            close_time={booking.store_details.close_time}\n                            landmark={booking.store_details.landmark}\n                            locality={booking.store_details.locality}\n                            street={booking.store_details.street}\n                            country={booking.store_details.country}\n                            state={booking.store_details.state}\n                            city={booking.store_details.city}\n                            zip={booking.store_details.zip}\n                            booking_date={booking.booking_details.booking_date}\n                            customer_id={booking.booking_details.customer_id}\n                            slot_details={booking.slot_details}\n                        />\n                    );\n                })\n            }\n        </Card.Group>\n    );\n    \n    if(props.loading){\n        bookings_html = <Loader />;\n    }\n\n    if(props.error){\n        alert(props.error)\n    }\n    \n\n    return (\n       <Aux>\n           {bookings_html}\n       </Aux>\n    );\n}\n\nconst mapStateToProps = state => {\n    return {\n        loading: state.booking.loading,\n        error: state.booking.error\n    };\n};\n\nexport default connect(mapStateToProps)(CardGroupOwner);","import React from 'react';\nimport {Card, CardContent} from 'semantic-ui-react';\n\nconst CardElementNew = props => {\n    let date = '';\n    let open_time = '', close_time = '';\n    \n    if(props.store_details && props.store_details.open_time){\n        let open_time_s = props.store_details.open_time.split(':');\n        open_time = open_time_s[0] + ':' + open_time_s[1];\n    }\n    if(props.store_details && props.store_details.close_time){\n        let close_time_s = props.store_details.close_time.split(':');\n        close_time = close_time_s[0] + ':' + close_time_s[1];\n    }\n    if(props.booking_date){\n        let cur_date_time = new Date(props.booking_date);\n        let day = cur_date_time.getDay() < 10 ? '0' + cur_date_time.getDay() : cur_date_time.getDay();\n        let month =  (cur_date_time.getMonth()+1) < 10 ? '0' + (cur_date_time.getMonth()+1) : (cur_date_time.getMonth()+1);\n\n        date = day + '/' + month + '/' + cur_date_time.getFullYear();\n    }\n    let slot_description = '';\n    if(props.slot_details && props.slot_details.description){\n        slot_description = props.slot_details.description;\n    }\n    let store_name = '';\n    if(props.store_details && props.store_details.store_name){\n        store_name = props.store_details.store_name;\n    }\n    let store_address = '';\n    if(props.store_details && props.store_details.locality && props.store_details.street && props.store_details.city){\n        store_address = props.store_details.locality + ',' + props.store_details.street + ',' + props.store_details.city;\n    }\n    return (\n        <Card>\n            <Card.Content>\n                <Card.Header>{store_name}</Card.Header>\n                <Card.Meta>\n                    Slot Date: {date}\n                </Card.Meta>\n                <Card.Meta>\n                    Slot Time: {slot_description}\n                </Card.Meta>\n                <Card.Description>\n                    Store Hours: {open_time} - {close_time}\n                </Card.Description>\n            </Card.Content>\n            <CardContent extra>\n                <Card.Description>\n                    {store_address}\n                </Card.Description>\n            </CardContent>\n        </Card>\n    );\n};\n\nexport default CardElementNew;","import React from 'react';\nimport CardElementCustomer from './CardElementCustomer/CardElementCustomer';\nimport Aux from '../../../hoc/Aux/Aux';\nimport {connect} from 'react-redux';\nimport {Card} from 'semantic-ui-react';\nimport Loader from '../Loader/Loader';\n\nconst CardGroupCustomer = (props) => {\n    let bookings = [];\n    \n    if(props.bookings && props.bookings.length > 0){\n      \n        props.bookings.forEach(booking => {\n            bookings.push({\n                booking_id: booking.booking_id,\n                booking_date: booking.booking_date,\n                store_details: booking.store,\n                slot_details: booking.slot\n\n            });\n            \n        });\n      \n          \n    }\n  \n    var bookings_html = (\n        <Card.Group style={{justifyContent: 'center', width: '100%'}}>\n            {\n                bookings.length > 0 && bookings.map(booking => {\n                    return(\n                        <CardElementCustomer\n                            key={booking.booking_id}\n                            booking_id={booking.booking_id}\n                            booking_date={booking.booking_date}\n                            store_details={booking.store_details}\n                            slot_details={booking.slot_details}\n                        />\n                    );\n                })\n            }\n        </Card.Group>\n    );\n    \n    if(props.loading){\n        bookings_html = <Loader />;\n    }\n\n    if(props.error){\n        alert(props.error)\n    }\n    \n\n    return (\n       <Aux>\n           {bookings_html}\n       </Aux>\n    );\n}\n\nconst mapStateToProps = state => {\n    return {\n        loading: state.booking.loading,\n        error: state.booking.error\n    };\n};\n\nexport default connect(mapStateToProps)(CardGroupCustomer);","import React, {Component} from 'react';\nimport Loader from '../../components/UI/Loader/Loader';\nimport CardGroupOwner from '../../components/UI/CardGroupOwner/CardGroupOwner';\nimport CardGroupCustomer from '../../components/UI/CardGroupCustomer/CardGroupCustomer';\nimport {connect} from 'react-redux';\nimport Aux from '../../hoc/Aux/Aux';\n\nimport * as actions from '../../store/actions';\n\n\nclass MyBookings extends Component {\n \n    componentDidMount(){\n        this.props.getBookings(this.props.token);\n    }\n\n    render(){\n        let bookings = [];\n        let html_alt = '';\n        if(this.props.bookings && this.props.bookings.length > 0){\n            this.props.bookings.forEach(booking =>{\n                bookings.push(booking);\n            });\n        }else{\n            html_alt = <h2>No bookings found</h2>\n        }\n        let heading = <h1>My Bookings</h1>;\n        if(parseInt(this.props.data.user_id) === 1){\n            heading = <h1>Store Bookings</h1>\n        }\n        let html = ''\n        if(bookings.length > 0){\n            if(parseInt(this.props.data.user_id) === 1)\n                html = <CardGroupOwner bookings={bookings} />\n            else\n                html = <CardGroupCustomer bookings={bookings} />\n        }else{\n            html = html_alt\n        }\n\n        return (\n            <Aux>\n                {heading}\n                {html}\n            </Aux>\n        );\n    };\n};\n\nconst mapStateToProps = state => {\n    return{\n        loading: state.booking.loading,\n        bookings: state.booking.booking,\n        error: state.booking.error,\n        token: state.auth.token,\n        data: state.auth.data\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        getBookings: (token) => dispatch(actions.fetchBooking(token))\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MyBookings);"],"sourceRoot":""}