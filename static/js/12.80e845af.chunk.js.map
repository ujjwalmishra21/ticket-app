{"version":3,"sources":["components/UI/Loader/Loader.js","components/UI/CardGroup/CardElement/CardElement.js","components/UI/CardGroup/CardGroup.js","containers/GetStores/GetStores.js"],"names":["LoaderUI","active","size","CardElement","state","showModal","data","booking_date","slot_id","onShowModal","setState","onCloseModal","onDateChange","date","handleChange","type","value","confirmSlotBook","event","preventDefault","customer_id","props","userData","user_id","store_id","createBooking","token","resetModal","options","this","slots","forEach","slot","start_time","open_time","end_time","close_time","push","label","description","html","Card","Content","className","Image","floated","src","Header","name","Meta","Rating","maxRating","rating","icon","Description","street","locality","city","extra","style","float","Modal","trigger","Button","primary","onClick","open","onClose","dateFormat","selected","placeholderText","onChange","placeholder","Actions","negative","positive","labelPosition","content","Aux","Component","connect","auth","dispatch","actions","loadingBooking","booking","loading","message","error","stores","store","stores_html","Group","justifyContent","width","map","landmark","split","key","id","store_name","zip","country","owner_id","Loader","alert","GetStores","user_data","JSON","parse","localStorage","getItem","parseInt","locationData","City","fetchStores","fetchSlots","locationLoad","location","location_data","params"],"mappings":"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","file":"static/js/12.80e845af.chunk.js","sourcesContent":["import React from 'react';\nimport { Dimmer, Loader, Segment} from 'semantic-ui-react';\n\nconst LoaderUI = () => (\n    <Segment>\n        <Dimmer active>\n            <Loader size='medium'/>\n        </Dimmer>\n    </Segment>\n);\n\nexport default LoaderUI;","import React, {Component} from 'react';\nimport { Card, Image, Rating, Button, Modal, Segment } from 'semantic-ui-react';\nimport DatePicker from 'react-datepicker';\nimport Select from 'react-select';\nimport {connect} from 'react-redux';\n\nimport Aux from '../../../../hoc/Aux/Aux'; \nimport Loader from '../../Loader/Loader';\nimport './CardElement.css';\n\nimport * as actions from '../../../../store/actions/index';\n\nclass CardElement extends Component{\n\n    state = {\n        showModal:false,\n        data: null,\n        booking_date: null,\n        slot_id: null\n    };\n    \n    onShowModal = () => {\n        this.setState({showModal: true });\n    };\n    onCloseModal = () => {\n        this.setState({showModal: false})\n    };\n\n    onDateChange = (date) => {\n       \n        this.setState({\n            booking_date: date\n        });\n    }\n\n    handleChange = (type, value) => {\n       \n        this.setState({\n            [type]: value\n        })\n    }\n    \n\n    confirmSlotBook = (event) => {\n        event.preventDefault();\n        let data = {\n            booking_date: this.state.booking_date,\n            slot_id: this.state.slot_id.value,\n            customer_id: this.props.userData.user_id,\n            store_id: this.props.store_id\n        };\n\n        this.props.createBooking(this.props.token, data);\n        this.resetModal();\n        this.onCloseModal();\n    }\n    resetModal = () => {\n        this.setState({\n            booking_date: null,\n            slot_id: null\n        })\n    }\n\n    render(){\n        // let data = {\n        //     store_id:this.props.store_id,\n        //     name:this.props.store_name,\n        //     rating:this.props.rating,\n        //     street:this.props.street,\n        //     locality:this.props.locality,\n        //     landmark:this.props.landmark,\n        //     city:this.props.city,\n        //     state:this.props.state,\n        //     zip:this.props.zip,\n        //     country:this.props.country,\n        //     owner_id:this.props.owner_id,\n        //     open_time:this.props.open_time,\n        //     close_time:this.props.close_time,\n        //     slots:[]\n        // };\n        \n        let options = [];\n        this.props.slots.forEach(slot => {\n            if(slot.start_time>=this.props.open_time && slot.end_time<= this.props.close_time){\n                options.push({\n                    value: slot.slot_id,\n                    label: slot.description\n                });\n            }\n        });\n\n        let html = (\n            <Card>\n            <Card.Content className='content'>\n                <Image\n                    floated='right'\n                    size='mini'\n                    src='https://img.icons8.com/wired/64/000000/online-store.png'\n                    className='storeIcon'\n                />\n                <Card.Header>{this.props.name}</Card.Header>\n                <Card.Meta><Rating maxRating={5} rating={this.props.rating} icon='star' /></Card.Meta>\n                <Card.Description>{this.props.street}, {this.props.locality}, {this.props.city}</Card.Description>\n            </Card.Content>\n            <Card.Content extra>\n                    <div style={{float:'left'}}>\n                        Time: <Card.Description>{this.props.open_time} - {this.props.close_time}</Card.Description>\n                    </div>\n                    <div style={{float:'right'}}>\n                         <Modal size='mini' trigger={<Button primary onClick={this.onShowModal}>Book</Button>} open={this.state.showModal} onClose={this.onCloseModal}>\n                            <Modal.Header>Pick A Slot</Modal.Header>\n                            <Modal.Content>\n                                <div className='datepicker-section'>\n                                    <DatePicker \n                                        dateFormat='dd/MM/yyyy'\n                                        className='datepicker' \n                                        selected={this.state.booking_date} \n                                        placeholderText=\"Select a date\" \n                                        onChange={this.onDateChange} />\n                                </div>\n                                <Select \n                                    className='select'\n                                    value={this.state.slot_id}\n                                    onChange={(value) => this.handleChange('slot_id', value)}\n                                    placeholder=\"Select a time slot\" \n                                    options={options} />\n                            </Modal.Content>\n                            <Modal.Actions>\n                                <Button negative onClick={this.onCloseModal}>Close</Button>\n                                <Button\n                                    positive\n                                    icon='checkmark'\n                                    labelPosition='right'\n                                    content='Confirm'\n                                    onClick={this.confirmSlotBook}\n                                />\n                            </Modal.Actions>\n                        </Modal>  \n                    </div>\n                </Card.Content>\n            </Card>\n        )\n\n        return (\n            <Aux>\n                {html}\n                \n            </Aux>\n        )\n    }    \n}\n\nconst mapStateToProps = state => {\n    return {\n         \n        userData: state.auth.data,\n        token: state.auth.token\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        createBooking: (token, data) => dispatch(actions.createBooking(token, data))\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CardElement);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Aux from '../../../hoc/Aux/Aux';\nimport { Card } from 'semantic-ui-react';\nimport Loader from '../Loader/Loader';\nimport CardElement from './CardElement/CardElement';\nconst CardGroup = props => {\n    let stores = [];\n    let slots = [];\n    props.stores.forEach(store => {\n        stores.push(store);\n    });\n    props.slots.forEach(slot => {\n        slots.push(slot);\n    });\n    \n    var stores_html = (\n        <Card.Group style={{justifyContent:'center', width: '100%'}}>    \n            {\n                stores.map(store => {\n                    let landmark = store.landmark ? store.landmark : '';\n                    let rating = store.rating ? store.rating : 2.5 ;\n                    let open_time = store.open_time.split(':');\n                    open_time = open_time[0] + ':' + open_time[1];\n                    let  close_time = store.close_time.split(':');\n                    close_time = close_time[0] + ':' + close_time[1];\n                    return (\n                    <CardElement \n                        key={store.id}\n                        src={store.src}\n                        store_id={store.store_id}\n                        name={store.store_name}\n                        rating={rating}\n                        street={store.street}\n                        locality={store.locality}\n                        landmark={landmark}\n                        city={store.city}\n                        state={store.state}\n                        zip={store.zip}\n                        country={store.country}\n                        owner_id={store.owner_id}\n                        open_time={open_time}\n                        close_time={close_time}\n                        slots={slots}\n                    />\n                    );\n                })  \n            }\n        </Card.Group>\n    )\n\n    if(props.loadingBooking){\n        stores_html = <Loader/>\n    }\n    if(props.message){\n        alert(props.message);\n    }\n    if(props.error){\n        alert(props.error);\n    }\n\n\n    return (\n        <Aux>\n        {stores_html}\n        </Aux>\n    )\n\n}\n \n// {\n//     \"store_id\": 2,\n//     \"store_name\": \"More Department Stores\",\n//     \"street\": \"Gyan Khand 2\",\n//     \"locality\": \"Indirapuram\",\n//     \"landmark\": null,\n//     \"city\": \"Ghaziabad\",\n//     \"state\": \"Uttar Pradesh\",\n//     \"country\": \"India\",\n//     \"zip\": 201010,\n//     \"created_at\": \"2020-05-16T13:27:49.000Z\",\n//     \"updated_at\": \"2020-05-16T13:27:49.000Z\",\n//     \"owner_id\": 1\n//   }\n\nconst mapStateToProps = state => {\n    return {\n        loadingBooking: state.booking.loading,\n        message: state.booking.message,\n        error: state.booking.error\n    };\n};\n\n\nexport default connect(mapStateToProps)(CardGroup);","import React, { Component } from 'react';\nimport { connect } from  'react-redux';\nimport Aux from '../../hoc/Aux/Aux';\nimport CardGroup from '../../components/UI/CardGroup/CardGroup';\nimport Loader from '../../components/UI/Loader/Loader';\nimport * as actions from '../../store/actions/index';\n\nclass GetStores extends Component{\n    \n    componentDidMount() {\n        let data = [];\n        let user_data = JSON.parse(localStorage.getItem('data'));\n     \n        if(parseInt(user_data.type) === 1){\n            data['owner_id'] = user_data.user_id;\n        }else if(parseInt(user_data.type) === 2){ \n            data['city'] = this.props.locationData.City;\n        }\n        \n        this.props.fetchStores(this.props.token,data);\n        this.props.fetchSlots(this.props.token);\n    }\n\n    render(){\n        let stores = [];\n        let slots = [];\n       \n        this.props.stores.forEach(store => {\n            stores.push(store);\n        });\n        this.props.slots.forEach(slot => {\n            slots.push(slot);\n        });\n       \n        let html = <CardGroup key='stores' stores={stores} slots={slots} />;\n        if(this.props.loading || this.props.locationLoad){\n            html = <Loader />\n        }\n        return (\n            <Aux>\n                <h1>Stores</h1>\n                {html}\n            </Aux>\n        );\n    }\n\n\n}\n\nconst mapStateToProps = state => {\n    return {\n        token: state.auth.token,\n        stores: state.store.stores,\n        loading: state.store.loading,\n        slots: state.slot.slots,\n        locationLoad: state.location.loading,\n        locationData: state.location.location_data\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchStores: (token, params) => dispatch(actions.fetchStores(token, params)),\n        fetchSlots: (token) => dispatch(actions.fetchSlots(token))\n    };\n};\n\n\nexport default connect(mapStateToProps,mapDispatchToProps)(GetStores);\n\n"],"sourceRoot":""}