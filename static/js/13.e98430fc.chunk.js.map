{"version":3,"sources":["components/UI/Loader/Loader.js","../node_modules/semantic-ui-react/dist/es/elements/Loader/Loader.js","containers/Home/Home.js"],"names":["LoaderUI","active","size","Loader","props","children","className","content","disabled","indeterminate","inline","inverted","classes","cx","useKeyOnly","useKeyOrValueAndKey","rest","getUnhandledProps","ElementType","getElementType","React","createElement","_extends","childrenUtils","isNil","handledProps","propTypes","Home","state","location_data","this","getLocation","firstName","userData","name","split","html","loading","locationLoad","Component","connect","auth","data","location","locationData","dispatch","actions"],"mappings":"iHAAA,+CAWeA,IARE,kBACb,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAQC,QAAM,GACV,kBAAC,IAAD,CAAQC,KAAK,e,iCCNzB,4FAUA,SAASC,EAAOC,GACd,IAAIH,EAASG,EAAMH,OACfI,EAAWD,EAAMC,SACjBC,EAAYF,EAAME,UAClBC,EAAUH,EAAMG,QAChBC,EAAWJ,EAAMI,SACjBC,EAAgBL,EAAMK,cACtBC,EAASN,EAAMM,OACfC,EAAWP,EAAMO,SACjBT,EAAOE,EAAMF,KACbU,EAAUC,IAAG,KAAMX,EAAMY,YAAWb,EAAQ,UAAWa,YAAWN,EAAU,YAAaM,YAAWL,EAAe,iBAAkBK,YAAWH,EAAU,YAAaG,YAAWT,GAAYE,EAAS,QAASQ,YAAoBL,EAAQ,UAAW,SAAUJ,GACjQU,EAAOC,YAAkBd,EAAQC,GACjCc,EAAcC,YAAehB,EAAQC,GACzC,OAAOgB,IAAMC,cAAcH,EAAaI,IAAS,GAAIN,EAAM,CACzDV,UAAWM,IACTW,IAAcC,MAAMnB,GAAYE,EAAUF,GAGhDF,EAAOsB,aAAe,CAAC,SAAU,KAAM,WAAY,YAAa,UAAW,WAAY,gBAAiB,SAAU,WAAY,QAC9HtB,EAAOuB,UA8BH,GACWvB,O,6HCrDTwB,E,4MACFC,MAAQ,CACJC,cAAe,M,kEAGfC,KAAK1B,MAAM2B,gB,+BAKX,IAAIC,EAAYF,KAAK1B,MAAM6B,SAASC,KAAKC,MAAM,KAAK,GAChDC,EAAO,uCAAaJ,GAMxB,OAJGF,KAAK1B,MAAMiC,SAAWP,KAAK1B,MAAMkC,gBAChCF,EAAO,kBAAC,IAAD,OAIP,kBAAC,IAAD,KACKA,O,GAnBEG,aAyCJC,uBAhBS,SAAAZ,GACpB,MAAO,CACHK,SAAUL,EAAMa,KAAKC,KACrBL,QAAST,EAAMa,KAAKJ,QACpBC,aAAcV,EAAMe,SAASN,QAC7BO,aAAchB,EAAMe,SAASd,kBAIV,SAAAgB,GACvB,MAAO,CACHd,YAAa,kBAAMc,EAASC,WAKrBN,CAA6Cb","file":"static/js/13.e98430fc.chunk.js","sourcesContent":["import React from 'react';\nimport { Dimmer, Loader, Segment} from 'semantic-ui-react';\n\nconst LoaderUI = () => (\n    <Segment>\n        <Dimmer active>\n            <Loader size='medium'/>\n        </Dimmer>\n    </Segment>\n);\n\nexport default LoaderUI;","import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useKeyOrValueAndKey } from '../../lib';\n/**\n * A loader alerts a user to wait for an activity to complete.\n * @see Dimmer\n */\n\nfunction Loader(props) {\n  var active = props.active,\n      children = props.children,\n      className = props.className,\n      content = props.content,\n      disabled = props.disabled,\n      indeterminate = props.indeterminate,\n      inline = props.inline,\n      inverted = props.inverted,\n      size = props.size;\n  var classes = cx('ui', size, useKeyOnly(active, 'active'), useKeyOnly(disabled, 'disabled'), useKeyOnly(indeterminate, 'indeterminate'), useKeyOnly(inverted, 'inverted'), useKeyOnly(children || content, 'text'), useKeyOrValueAndKey(inline, 'inline'), 'loader', className);\n  var rest = getUnhandledProps(Loader, props);\n  var ElementType = getElementType(Loader, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nLoader.handledProps = [\"active\", \"as\", \"children\", \"className\", \"content\", \"disabled\", \"indeterminate\", \"inline\", \"inverted\", \"size\"];\nLoader.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** A loader can be active or visible. */\n  active: PropTypes.bool,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** A loader can be disabled or hidden. */\n  disabled: PropTypes.bool,\n\n  /** A loader can show it's unsure of how long a task will take. */\n  indeterminate: PropTypes.bool,\n\n  /** Loaders can appear inline with content. */\n  inline: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['centered'])]),\n\n  /** Loaders can have their colors inverted. */\n  inverted: PropTypes.bool,\n\n  /** Loaders can have different sizes. */\n  size: PropTypes.oneOf(SUI.SIZES)\n} : {};\nexport default Loader;","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport Aux from '../../hoc/Aux/Aux';\nimport Loader from '../../components/UI/Loader/Loader';\nimport * as actions from '../../store/actions/index';\n\nclass Home extends Component{\n    state = {\n        location_data: null\n    }\n    componentDidMount(){\n        this.props.getLocation();\n        \n    }\n\n    render(){\n        let firstName = this.props.userData.name.split(' ')[0];\n        let html = <h1>Welcome {firstName}</h1>;\n        \n        if(this.props.loading || this.props.locationLoad){\n            html = <Loader />\n        }\n       \n        return (\n            <Aux>\n                {html}\n            </Aux>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        userData: state.auth.data,\n        loading: state.auth.loading,\n        locationLoad: state.location.loading,\n        locationData: state.location.location_data\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        getLocation: () => dispatch(actions.fetchLocation())\n    };\n};\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);"],"sourceRoot":""}