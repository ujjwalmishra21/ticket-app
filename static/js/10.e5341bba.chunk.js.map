{"version":3,"sources":["components/UI/Input/Input.js","components/UI/ImageComponent/ImageComponent.js","containers/Login/Login.js"],"names":["input","props","inputElement","validError","invalid","shouldValidate","touched","elementType","Input","elementConfig","value","onChange","changed","inputMode","options","style","marginBottom","ImageComponent","circular","bordered","size","class","Login","state","loginForm","mobile_number","type","placeholder","validation","required","isNumeric","minLength","maxLength","valid","formIsValid","onSubmit","event","preventDefault","onAuthInit","changeHandler","inputIdentifier","updatedFormElement","updatedObject","target","checkValidity","updatedForm","setState","formElementAr","key","this","push","id","config","form","map","formEle","disabled","loading","onClick","className","redirectPath","to","src","padding","margin","backgroundColor","Component","connect","auth","error","dispatch","actions"],"mappings":"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","file":"static/js/10.e5341bba.chunk.js","sourcesContent":["import React from 'react';\nimport { Form, Select } from 'semantic-ui-react'\nconst input = (props) => {\n    \n    let inputElement = null;\n    let validError = null;\n    if(props.invalid && props.shouldValidate && props.touched){\n        validError = <p>Please enter a valid value</p>\n    }\n\n    switch(props.elementType){\n        case 'input':\n            inputElement = <Form.Input \n                                {...props.elementConfig}\n                                value={props.value}\n                                onChange={props.changed}\n                                inputMode={props.inputMode}    \n                            />;\n        break;\n        case 'select':\n            inputElement = <Select\n                                value={props.value}\n                                onChange={props.changed}\n                                options={props.elementConfig.options}\n                            />;\n        break;\n        default:\n            inputElement = null;\n        break;\n\n    }\n\n    return (\n        <div style={{marginBottom:'10px'}}>\n            {inputElement}\n            {validError}\n        </div>\n    )\n}\n\nexport default input;\n\n","import React from 'react';\nimport { Image } from 'semantic-ui-react';\nimport './ImageComponent.css';\nconst ImageComponent = props => {\n    return (\n        <Image  circular={props.circular} bordered={props.bordered} size={props.size} style={props.class}/>\n    );\n}\n\nexport default ImageComponent;","import React, { Component } from 'react';\nimport { Link, Redirect } from 'react-router-dom';\nimport {connect} from 'react-redux';\nimport Aux from '../../hoc/Aux/Aux';\nimport Input from '../../components/UI/Input/Input';\nimport Image from '../../components/UI/ImageComponent/ImageComponent';\nimport { Form, Button} from 'semantic-ui-react';\nimport {checkValidity, updatedObject} from '../../utility/utility';\nimport * as actions from '../../store/actions/index';\n\nclass Login extends Component{\n    state = {\n        loginForm:{\n            mobile_number:{\n                elementType:'input',\n                elementConfig:{\n                    type:'text',\n                    placeholder:'Enter mobile number'\n                },\n                value:'',\n                validation:{\n                    required:true,\n                    isNumeric:true,\n                    minLength:10,\n                    maxLength:10\n                },\n                inputMode:'numeric',\n                valid: false,\n                touched: false\n            }\n        },\n        formIsValid: false\n    }\n    \n    onSubmit = (event) => {\n        event.preventDefault();\n        this.props.onAuthInit(this.state.loginForm.mobile_number.value);\n    }\n\n    changeHandler = (event, inputIdentifier) => {\n\n        const updatedFormElement = updatedObject( this.state.loginForm[inputIdentifier],{\n            value: event.target.value,\n            valid: checkValidity(event.target.value,  this.state.loginForm[inputIdentifier].validation),\n            touched: true\n        });\n\n        const updatedForm = updatedObject(this.state.loginForm, {\n            [inputIdentifier]: updatedFormElement\n        });\n\n        let formIsValid = true;\n        for(let inputIdentifier in updatedForm){\n            formIsValid = updatedForm[inputIdentifier].valid && formIsValid;\n        }\n        this.setState({\n            loginForm: updatedForm,\n            formIsValid: formIsValid\n        });\n    }\n    render(){\n\n        let formElementAr = [];\n\n        for(let key in this.state.loginForm){\n            formElementAr.push({\n                id: key,\n                config: this.state.loginForm[key]\n            })\n        }\n        let form = (\n            <Form>\n               { formElementAr.map((formEle) => {\n                    return (\n                        <Input\n                            key={formEle.id}\n                            elementType={formEle.config.elementType}\n                            elementConfig={formEle.config.elementConfig}\n                            value={formEle.config.value}\n                            invalid={!formEle.config.valid}\n                            shouldValidate={formEle.config.validation}\n                            touched={formEle.config.touched}\n                            inputMode={formEle.config.inputMode}\n                            changed={(event) => this.changeHandler(event, formEle.id)}\n                        />\n                    );\n                })\n                 }\n                 <Button disabled={this.props.loading} loading={this.props.loading} onClick={this.onSubmit} className=\"ui button\">Login</Button>\n            </Form>\n        );\n        let redirectPath = null;\n        if(this.props.mobile_number && !this.props.loading){\n            redirectPath = (<Redirect to=\"/otp\" />)\n        }\n        \n        let imageClass = {\n            padding: '20px',\n            margin: '30px',\n            backgroundColor: 'white'\n        };\n\n        return (\n            <Aux>\n                {redirectPath}\n                <Image src='https://img.icons8.com/officel/80/000000/booking.png' size='small' circular='true' bordered='true' class={imageClass} />\n                {form}\n            </Aux>\n        );\n        \n   \n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        loading: state.auth.loading,\n        error: state.auth.error,\n        mobile_number: state.auth.mobile_number,\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onAuthInit: (mobile_number) => dispatch(actions.authInit(mobile_number))\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);"],"sourceRoot":""}